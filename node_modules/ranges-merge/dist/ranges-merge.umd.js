/**
 * @name ranges-merge
 * @fileoverview Merge and sort string index ranges
 * @version 8.2.2
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-merge/}
 */

"use strict";var rangesMerge=(()=>{var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames,m=Object.getOwnPropertySymbols;var f=Object.prototype.hasOwnProperty,R=Object.prototype.propertyIsEnumerable;var y=(s,t,a)=>t in s?p(s,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):s[t]=a,u=(s,t)=>{for(var a in t||(t={}))f.call(t,a)&&y(s,a,t[a]);if(m)for(var a of m(t))R.call(t,a)&&y(s,a,t[a]);return s};var T=(s,t)=>{for(var a in t)p(s,a,{get:t[a],enumerable:!0})},w=(s,t,a,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of b(t))!f.call(s,i)&&i!==a&&p(s,i,{get:()=>t[i],enumerable:!(r=h(t,i))||r.enumerable});return s};var E=s=>w(p({},"__esModule",{value:!0}),s);var F={};T(F,{defaults:()=>c,rMerge:()=>x,version:()=>D});var j={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function d(s,t){if(!Array.isArray(s)||!s.length)return s;let a=u(u({},j),t),r,i;if(a.strictlyTwoElementsInRangeArrays&&!s.every((o,l)=>!Array.isArray(o)||o.length!==2?(r=l,i=o.length,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${r}th range (${JSON.stringify(s[r],null,4)}) has not two but ${i} elements!`);if(!s.every((o,l)=>!Array.isArray(o)||!Number.isInteger(o[0])||o[0]<0||!Number.isInteger(o[1])||o[1]<0?(r=l,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${r}th range (${JSON.stringify(s[r],null,4)}) does not consist of only natural numbers!`);let n=s.length**2,g=0;return Array.from(s).sort((o,l)=>(a.progressFn&&(g+=1,a.progressFn(Math.floor(g*100/n))),o[0]===l[0]?o[1]<l[1]?-1:o[1]>l[1]?1:0:o[0]<l[0]?-1:1))}var $="8.2.2";var D=$,c={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};function x(s,t){function a(e){return!!e&&typeof e=="object"&&!Array.isArray(e)}if(!Array.isArray(s)||!s.length)return null;let r;if(t)if(a(t)){if(r=u(u({},c),t),r.progressFn&&a(r.progressFn)&&!Object.keys(r.progressFn).length)r.progressFn=null;else if(r.progressFn&&typeof r.progressFn!="function")throw new Error(`ranges-merge: [THROW_ID_01] opts.progressFn must be a function! It was given of a type: "${typeof r.progressFn}", equal to ${JSON.stringify(r.progressFn,null,4)}`);if(![1,2,"1","2"].includes(r.mergeType))throw new Error(`ranges-merge: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof r.mergeType}", equal to ${JSON.stringify(r.mergeType,null,4)}`);if(typeof r.joinRangesThatTouchEdges!="boolean")throw new Error(`ranges-merge: [THROW_ID_04] opts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "${typeof r.joinRangesThatTouchEdges}", equal to ${JSON.stringify(r.joinRangesThatTouchEdges,null,4)}`)}else throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:
${JSON.stringify(t,null,4)} (type ${typeof t})`);else r=u({},c);let i=s.filter(e=>Array.isArray(e)).map(e=>[...e]).filter(e=>e[2]!==void 0||e[0]!==e[1]),n,g,o;r.progressFn?n=d(i,{progressFn:e=>{o=Math.floor(e/5),o!==g&&(g=o,r.progressFn(o))}}):n=d(i);let l=n.length-1;for(let e=l;e>0;e--)r.progressFn&&(o=Math.floor((1-e/l)*78)+21,o!==g&&o>g&&(g=o,r.progressFn(o))),(n[e][0]<=n[e-1][0]||!r.joinRangesThatTouchEdges&&n[e][0]<n[e-1][1]||r.joinRangesThatTouchEdges&&n[e][0]<=n[e-1][1])&&(n[e-1][0]=Math.min(n[e][0],n[e-1][0]),n[e-1][1]=Math.max(n[e][1],n[e-1][1]),n[e][2]!==void 0&&(n[e-1][0]>=n[e][0]||n[e-1][1]<=n[e][1])&&n[e-1][2]!==null&&(n[e][2]===null&&n[e-1][2]!==null?n[e-1][2]=null:n[e-1][2]!=null?+r.mergeType==2&&n[e-1][0]===n[e][0]?n[e-1][2]=n[e][2]:n[e-1][2]+=n[e][2]:n[e-1][2]=n[e][2]),n.splice(e,1),e=n.length);return n.length?n:null}return E(F);})();
/**
 * @name ranges-sort
 * @fileoverview Sort string index ranges
 * @version 5.1.1
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-sort/}
 */
